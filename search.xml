<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[JS实现随机颜色的三种方式和颜色格式的转化]]></title>
      <url>http://www.foreverz.cn/2016/09/29/js%E9%9A%8F%E6%9C%BA%E9%A2%9C%E8%89%B2/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>前端的颜色表示方式多种，一种是以3个或6个十六进制的数子表示，一种是RGB的数字形式，还有一种是直接以颜色的英文来表示。这三种都是不支持透明色的。所以还有RGBA的表式方式，在RGB的的基础上加入了Alpha透明，使网页可以展现更加复杂绚丽的效果。<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="随机颜色"><a href="#随机颜色" class="headerlink" title="随机颜色"></a>随机颜色</h2><p>在平时的码农日常中，经常会用到求随机颜色的地方，下面是我总结的几种简单的实现随机颜色的方式：</p>
<h3 id="十六进制格式（-000000-FFFFFF）"><a href="#十六进制格式（-000000-FFFFFF）" class="headerlink" title="十六进制格式（#000000-#FFFFFF）"></a>十六进制格式（#000000-#FFFFFF）</h3><p>第一种是比较简单的方法，这种方法是先随机生成ffffff以内16进制数，然后判断位数，少于6位的用while循环在前面加0，凑够6位。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomHexColor</span>(<span class="params"></span>) </span>&#123; <span class="comment">//随机生成十六进制颜色</span></div><div class="line">    <span class="keyword">var</span> hex = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">16777216</span>).toString(<span class="number">16</span>); <span class="comment">//生成ffffff以内16进制数</span></div><div class="line">    <span class="keyword">while</span> (hex.length &lt; <span class="number">6</span>) &#123; <span class="comment">//while循环判断hex位数，少于6位前面加0凑够6位</span></div><div class="line">        hex = <span class="string">'0'</span> + hex;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">'#'</span> + hex; <span class="comment">//返回‘#’开头16进制颜色</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>还有一种比较方便但是比较难懂的方法，需要用到位运算。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomHexColor</span>(<span class="params"></span>) </span>&#123;	<span class="comment">//随机生成十六进制颜色</span></div><div class="line">	<span class="keyword">return</span> <span class="string">'#'</span> + (<span class="string">'00000'</span> + (<span class="built_in">Math</span>.random() * <span class="number">0x1000000</span> &lt;&lt; <span class="number">0</span>).toString(<span class="number">16</span>)).substr(<span class="number">-6</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>按执行顺序可以分为以下六步：</p>
<ol>
<li>先执行<code>Math.random() * 0x1000000</code>，其中0x1000000=0xffffff+1，因为Math.random()取不到1，所以+1，这样就会生成一个1-16777216(不包含)以内的浮点数。</li>
<li>然后执行<code>&lt;&lt;0</code>，这是取整运算，去掉后面的小数点。这时为一个16777216(不包含)以内的十进制数。</li>
<li>之后执行<code>.toString(16)</code>，把十进制数转化为六位以下16进制数。</li>
<li>再后执行<code>&#39;00000&#39;+</code>，这时因为之前生成的16进制数最少可能仅一位，在前面加上5个0。</li>
<li>最后执行<code>.substr(-6)</code>，是去从-6开始的后面所有字符串，也就是最后6位数。</li>
<li>前面加上<code>#</code>并<code>retuen</code>。</li>
</ol>
<h3 id="RGB格式"><a href="#RGB格式" class="headerlink" title="RGB格式"></a>RGB格式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomRgbColor</span>(<span class="params"></span>) </span>&#123; <span class="comment">//随机生成RGB颜色</span></div><div class="line">    <span class="keyword">var</span> r = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>); <span class="comment">//随机生成256以内r值</span></div><div class="line">    <span class="keyword">var</span> g = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>); <span class="comment">//随机生成256以内g值</span></div><div class="line">    <span class="keyword">var</span> b = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>); <span class="comment">//随机生成256以内b值</span></div><div class="line">    <span class="keyword">return</span> <span class="string">`rgb(<span class="subst">$&#123;r&#125;</span>,<span class="subst">$&#123;g&#125;</span>,<span class="subst">$&#123;b&#125;</span>)`</span>; <span class="comment">//返回rgb(r,g,b)格式颜色</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="RGBA格式"><a href="#RGBA格式" class="headerlink" title="RGBA格式"></a>RGBA格式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomRgbaColor</span>(<span class="params"></span>) </span>&#123; <span class="comment">//随机生成RGBA颜色</span></div><div class="line">    <span class="keyword">var</span> r = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>); <span class="comment">//随机生成256以内r值</span></div><div class="line">    <span class="keyword">var</span> g = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>); <span class="comment">//随机生成256以内g值</span></div><div class="line">    <span class="keyword">var</span> b = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>); <span class="comment">//随机生成256以内b值</span></div><div class="line">    <span class="keyword">var</span> alpha = <span class="built_in">Math</span>.random(); <span class="comment">//随机生成1以内a值</span></div><div class="line">    <span class="keyword">return</span> <span class="string">`rgb(<span class="subst">$&#123;r&#125;</span>,<span class="subst">$&#123;g&#125;</span>,<span class="subst">$&#123;b&#125;</span>,<span class="subst">$&#123;alpha&#125;</span>)`</span>; <span class="comment">//返回rgba(r,g,b,a)格式颜色</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="颜色格式转化"><a href="#颜色格式转化" class="headerlink" title="颜色格式转化"></a>颜色格式转化</h2><p>在编码过程中，经常会遇到要将颜色格式相互转化的问题,其中十六进制格式和RGB格式是可以相互转化的，但是RGBA格式由于多了前两者没有的Alpha透明属性，所以和前两者转化会丢失Alpha值，不建议进行转化，下面是我的颜色转化的方法：</p>
<h3 id="十六进制转为RGB"><a href="#十六进制转为RGB" class="headerlink" title="十六进制转为RGB"></a>十六进制转为RGB</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex2Rgb</span>(<span class="params">hex</span>) </span>&#123; <span class="comment">//十六进制转为RGB</span></div><div class="line">    <span class="keyword">var</span> rgb = []; <span class="comment">// 定义rgb数组</span></div><div class="line">    <span class="keyword">if</span> (<span class="regexp">/^\#[0-9A-F]&#123;3&#125;$/i</span>.test(hex)) &#123; <span class="comment">//判断传入是否为#三位十六进制数</span></div><div class="line">        <span class="keyword">let</span> sixHex = <span class="string">'#'</span>;</div><div class="line">        hex.replace(<span class="regexp">/[0-9A-F]/ig</span>, <span class="function"><span class="keyword">function</span>(<span class="params">kw</span>) </span>&#123;</div><div class="line">            sixHex += kw + kw; <span class="comment">//把三位16进制数转化为六位</span></div><div class="line">        &#125;);</div><div class="line">        hex = sixHex; <span class="comment">//保存回hex</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="regexp">/^#[0-9A-F]&#123;6&#125;$/i</span>.test(hex)) &#123; <span class="comment">//判断传入是否为#六位十六进制数</span></div><div class="line">        hex.replace(<span class="regexp">/[0-9A-F]&#123;2&#125;/ig</span>, <span class="function"><span class="keyword">function</span>(<span class="params">kw</span>) </span>&#123;</div><div class="line">            rgb.push(<span class="built_in">eval</span>(<span class="string">'0x'</span> + kw)); <span class="comment">//十六进制转化为十进制并存如数组</span></div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> <span class="string">`rgb(<span class="subst">$&#123;rgb.join(<span class="string">','</span>)&#125;</span>)`</span>; <span class="comment">//输出RGB格式颜色</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`Input <span class="subst">$&#123;hex&#125;</span> is wrong!`</span>);</div><div class="line">        <span class="keyword">return</span> <span class="string">'rgb(0,0,0)'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="RGB转为十六进制"><a href="#RGB转为十六进制" class="headerlink" title="RGB转为十六进制"></a>RGB转为十六进制</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">rgb2Hex</span>(<span class="params">rgb</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="regexp">/^rgb\((\d&#123;1,3&#125;\,)&#123;2&#125;\d&#123;1,3&#125;\)$/i</span>.test(rgb)) &#123; <span class="comment">//test RGB</span></div><div class="line">        <span class="keyword">var</span> hex = <span class="string">'#'</span>; <span class="comment">//定义十六进制颜色变量</span></div><div class="line">        rgb.replace(<span class="regexp">/\d&#123;1,3&#125;/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">kw</span>) </span>&#123; <span class="comment">//提取rgb数字</span></div><div class="line">            kw = <span class="built_in">parseInt</span>(kw).toString(<span class="number">16</span>); <span class="comment">//转为十六进制</span></div><div class="line">            kw = kw.length &lt; <span class="number">2</span> ? <span class="number">0</span> + kw : kw; <span class="comment">//判断位数，保证两位</span></div><div class="line">            hex += kw; <span class="comment">//拼接</span></div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> hex; <span class="comment">//返回十六进制</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`Input <span class="subst">$&#123;rgb&#125;</span> is wrong!`</span>);</div><div class="line">        <span class="keyword">return</span> <span class="string">'#000'</span>; <span class="comment">//输入格式错误,返回#000</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上就是我在平时遇到的关于颜色处理方面的问题，大家有遇到什么奇怪的问题和更好的解决方法可以交流沟通一下。</p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Markdown语法]]></title>
      <url>http://www.foreverz.cn/2016/09/27/Markdown%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>先是使用了为知笔记，接触到Markdown,后来又在github玩起了博客，Markdown就更加必不可少了，在使用为知笔记的过程中，由于为知笔记有很多的bug，自己也是新手，所以用的很不顺手，走了很多的弯路，后来改用sublime编辑，果然好很多，推荐大家也用sublime进行编辑。下面呢是我在用Markdown过程中学到到语法和总结的一些使用心得和方法。持续更新哦！<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>在行首插入 1 到 6个#，分别表示标题 1 到标题 6<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 这是标题1</div><div class="line">## 这是标题2</div><div class="line">### 这是标题3</div><div class="line">#### 这是标题4</div><div class="line">##### 这是标题5</div><div class="line">###### 这是标题6</div></pre></td></tr></table></figure></p>
<p>保存后的效果：<br><img src="http://p1.bpimg.com/4851/66c2d7412399f8cf.png" alt=""></p>
<h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>在行首增加 1. 、 2. 、 3. ，即数字和英文句点, 不要求数字一定要连续，可以都是 1.，后面加一个空格。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. 有序列表</div><div class="line">1. 有序列表</div><div class="line">4. 有序列表</div></pre></td></tr></table></figure></p>
<p>保存后的效果：</p>
<ol>
<li>有序列表</li>
<li>有序列表</li>
<li>有序列表</li>
</ol>
<h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>在行首增加 * 、+ 或 -<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">* 无序列表</div><div class="line">* 无序列表</div></pre></td></tr></table></figure></p>
<p>保存后的效果：</p>
<ul>
<li>无序列表</li>
<li>无序列表</li>
</ul>
<h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![](http://cdn.wiz.cn/wp-content/uploads/2015/06/wiz_logo.png)</div></pre></td></tr></table></figure>
<p><img src="http://foreverz.cn/img/avatar.png" alt=""></p>
<h2 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h2><p>[描述](链接地址)，例如：[为知笔记]( <a href="http://www.wiz.cn)，注意要使用英文符号" target="_blank" rel="external">http://www.wiz.cn)，注意要使用英文符号</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[为知笔记]( http://www.wiz.cn)</div></pre></td></tr></table></figure></p>
<p>保存后的效果:<br><a href="http://www.wiz.cn" target="_blank" rel="external">为知笔记</a></p>
<h2 id="粗体、斜体、删除线"><a href="#粗体、斜体、删除线" class="headerlink" title="粗体、斜体、删除线"></a>粗体、斜体、删除线</h2><p>粗体：在文字前后添加 ** (注意符号与文字间不要有空格）<br>斜体：在文字前后添加 *<br>删除线：在文字前后添加 ~~<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">**粗体**</div><div class="line">*斜体*</div><div class="line">~~删除线~~</div></pre></td></tr></table></figure></p>
<p>保存后的效果：<br><strong>粗体</strong><br><em>斜体</em><br><del>删除线</del></p>
<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>Markdown中的转义字符为\，可以转义的有：<br>\ 反斜杠<br>` 反引号<br>* 星号<br>_ 下划线<br>{ } 大括号<br>[ ] 中括号<br>( ) 小括号<br># 井号<br>+ 加号<br>- 减号<br>. 英文句号<br>! 感叹号</p>
<h2 id="引用文字"><a href="#引用文字" class="headerlink" title="引用文字"></a>引用文字</h2><p>在文字前添加 &gt;<br>保存后的效果：</p>
<blockquote>
<p>如果你无法简洁的表达你的想法，那只说明你还不够了解它。 – 阿尔伯特·爱因斯坦</p>
</blockquote>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">| 为知笔记|更新 | 版本 |</div><div class="line">|---------|-----|------|</div><div class="line">| WizNote | Markdown| Latest |</div></pre></td></tr></table></figure>
<p>保存后的效果：</p>
<table>
<thead>
<tr>
<th>为知笔记</th>
<th>更新</th>
<th>版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>WizNote</td>
<td>Markdown</td>
<td>Latest</td>
</tr>
</tbody>
</table>
<h2 id="引用代码"><a href="#引用代码" class="headerlink" title="引用代码"></a>引用代码</h2><p>需要引用代码时，如果引用的语句只有一段，不分行，可以用一个 ` 将语句包起来。<br>多行则要在代码前后增加 三个反单引号： ```,后面写上所引用的语言<br>for (var i = 0; i &lt; 100; i++)<br>{<br>    console.log(“hello markdown!\n”);<br>}<br>保存后的效果：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"hello markdown!\n"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="生成目录"><a href="#生成目录" class="headerlink" title="生成目录"></a>生成目录</h2><p>在任何你想要展示Markdown 笔记目录的地方，添加 [TOC] ， 在阅读模式下，标题1~6样式的内容会被提取出来作为目录，相当于大纲功能。<br><img src="http://p1.bpimg.com/4851/4172c368837ea17b.png" alt=""></p>
</the>]]></content>
    </entry>
    
  
  
</search>
